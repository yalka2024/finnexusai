# FinAI Nexus - CI/CD Pipeline
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1

jobs:
  # Code Quality and Testing
  test:
    name: Test & Quality Check
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: finnexusai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_DATABASE: finnexusai_test
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: apps/backend/package-lock.json

    - name: Install dependencies
      run: |
        cd apps/backend
        npm ci

    - name: Run linting
      run: |
        cd apps/backend
        npm run lint || echo "Linting not configured yet"

    - name: Run security audit
      run: |
        cd apps/backend
        npm audit --audit-level=high

    - name: Run unit tests
      run: |
        cd apps/backend
        npm test
      env:
        NODE_ENV: test
        POSTGRES_HOST: localhost
        POSTGRES_DB: finnexusai_test
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        MONGODB_URI: mongodb://localhost:27017/finnexusai_test
        REDIS_HOST: localhost
        JWT_SECRET: test-secret-key

    - name: Run integration tests
      run: |
        cd apps/backend
        npm run test:integration || echo "Integration tests not configured yet"
      env:
        NODE_ENV: test
        POSTGRES_HOST: localhost
        POSTGRES_DB: finnexusai_test
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        MONGODB_URI: mongodb://localhost:27017/finnexusai_test
        REDIS_HOST: localhost
        JWT_SECRET: test-secret-key

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./apps/backend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/finnexus-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/finnexus-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./apps/web
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/finnexus-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/finnexus-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # For example: kubectl apply -f k8s/staging/
        # Or: docker-compose -f docker-compose.staging.yml up -d

    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging..."
        # Add smoke tests here
        curl -f ${{ secrets.STAGING_URL }}/health || exit 1

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # For example: kubectl apply -f k8s/production/
        # Or: docker-compose -f docker-compose.production.yml up -d

    - name: Run production health checks
      run: |
        echo "Running production health checks..."
        curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1
        curl -f ${{ secrets.PRODUCTION_URL }}/metrics || exit 1

    - name: Notify deployment success
      if: success()
      run: |
        echo "âœ… Production deployment successful!"
        # Add notification logic here (Slack, Discord, etc.)

  # Performance Testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Artillery
      run: npm install -g artillery

    - name: Run load tests
      run: |
        artillery run performance/load-test.yml
      env:
        TARGET_URL: ${{ secrets.PRODUCTION_URL }}

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: performance/results/

