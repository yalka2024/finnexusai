name: FinNexus AI CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Daily security scans at 2 AM

env:
  REGISTRY: finnexusai.azurecr.io
  IMAGE_NAME_BACKEND: finnexusai/backend
  IMAGE_NAME_FRONTEND: finnexusai/frontend

jobs:
  # Security Scanning
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Code Quality and Testing
  code-quality:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: finnexus_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          apps/backend/package-lock.json
          apps/frontend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./apps/backend
      run: npm ci

    - name: Install frontend dependencies
      working-directory: ./apps/frontend
      run: npm ci

    - name: Run ESLint
      run: |
        cd apps/backend && npm run lint
        cd ../frontend && npm run lint

    - name: Run backend tests
      working-directory: ./apps/backend
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finnexus_test
        REDIS_URL: redis://localhost:6379
      run: npm test

    - name: Run frontend tests
      working-directory: ./apps/frontend
      run: npm test -- --coverage --watchAll=false

    - name: Generate test coverage reports
      run: |
        cd apps/backend && npm run coverage
        cd ../frontend && npm run coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./apps/backend/coverage/lcov.info,./apps/frontend/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Build and Push Images
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./apps/backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./apps/frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Deploy to Kubernetes
  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

    - name: Update image tags in Kubernetes manifests
      run: |
        sed -i "s|finnexusai/backend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:main-${{ github.sha }}|g" k8s/backend-deployment.yaml
        sed -i "s|finnexusai/frontend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:main-${{ github.sha }}|g" k8s/frontend-deployment.yaml

    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/
        
        # Wait for deployments to be ready
        kubectl rollout status deployment/finnexus-backend -n finnexus-ai --timeout=600s
        kubectl rollout status deployment/finnexus-frontend -n finnexus-ai --timeout=600s

    - name: Run post-deployment tests
      run: |
        # Health check endpoints
        kubectl run test-pod --image=curlimages/curl --rm -i --restart=Never -- \
          curl -f https://api.finnexusai.com/api/v1/health
        
        kubectl run test-pod --image=curlimages/curl --rm -i --restart=Never -- \
          curl -f https://finnexusai.com

    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Performance Testing
  performance-test:
    name: Performance & Load Testing
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Artillery
      run: npm install -g artillery

    - name: Run load tests
      run: |
        artillery run tests/load/api-load-test.yml --target https://api.finnexusai.com
        artillery run tests/load/frontend-load-test.yml --target https://finnexusai.com

    - name: Upload performance reports
      uses: actions/upload-artifact@v3
      with:
        name: performance-reports
        path: artillery-report.json

  # Compliance Check
  compliance-check:
    name: Compliance & Audit
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run OWASP ZAP baseline scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'https://finnexusai.com'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    - name: Generate compliance report
      run: |
        echo "# Compliance Report" > compliance-report.md
        echo "## Security Scans" >> compliance-report.md
        echo "- ✅ OWASP ZAP baseline scan completed" >> compliance-report.md
        echo "- ✅ Trivy vulnerability scan completed" >> compliance-report.md
        echo "- ✅ Code quality checks passed" >> compliance-report.md
        echo "## Performance Tests" >> compliance-report.md
        echo "- ✅ Load testing completed" >> compliance-report.md
        echo "- ✅ Performance benchmarks met" >> compliance-report.md

    - name: Upload compliance report
      uses: actions/upload-artifact@v3
      with:
        name: compliance-report
        path: compliance-report.md
