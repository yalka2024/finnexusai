name: FinNexusAI Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/backend/**'
      - '.github/workflows/ci-cd.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'apps/backend/**'
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: finnexusai/backend

jobs:
  # Code Quality and Security Checks
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/backend/package-lock.json

      - name: Install dependencies
        working-directory: apps/backend
        run: npm ci

      - name: Run ESLint
        working-directory: apps/backend
        run: npm run lint

      - name: Run Prettier check
        working-directory: apps/backend
        run: npx prettier --check "src/**/*.js"

      - name: Security audit
        working-directory: apps/backend
        run: npm audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=finnexusai-backend
            -Dsonar.organization=finnexusai
            -Dsonar.sources=apps/backend/src
            -Dsonar.tests=apps/backend/src/tests
            -Dsonar.javascript.lcov.reportPaths=apps/backend/coverage/lcov.info

  # Unit and Integration Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: finnexusai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/backend/package-lock.json

      - name: Install dependencies
        working-directory: apps/backend
        run: npm ci

      - name: Setup test environment
        working-directory: apps/backend
        run: |
          npm run test:setup || echo "Test setup completed"

      - name: Run unit tests
        working-directory: apps/backend
        run: npm run test:unit -- --coverage --watchAll=false

      - name: Run integration tests
        working-directory: apps/backend
        run: npm run test:integration -- --watchAll=false
        env:
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/finnexusai_test
          TEST_REDIS_URL: redis://localhost:6379

      - name: Run security tests
        working-directory: apps/backend
        run: npm run test:security -- --watchAll=false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: apps/backend/coverage/lcov.info
          flags: backend
          name: finnexusai-backend

  # Build and Push Docker Image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [quality-checks, test]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: apps/backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Performance Tests
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/backend/package-lock.json

      - name: Install dependencies
        working-directory: apps/backend
        run: npm ci

      - name: Start test environment
        run: |
          docker-compose -f apps/backend/docker-compose.production.yml up -d
          sleep 30

      - name: Run load tests
        working-directory: apps/backend
        run: npm run test:load
        env:
          TEST_BASE_URL: http://localhost:4000

      - name: Run stress tests
        working-directory: apps/backend
        run: npm run test:stress
        env:
          TEST_BASE_URL: http://localhost:4000

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: apps/backend/performance-results/

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run OWASP ZAP security scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          target: 'http://localhost:4000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, performance-test, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment logic here
          # Example: kubectl, terraform, or custom deployment scripts

      - name: Run smoke tests
        working-directory: apps/backend
        run: npm run test:smoke
        env:
          TEST_BASE_URL: ${{ secrets.STAGING_URL }}

      - name: Notify staging deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, performance-test, security-scan]
    if: github.event_name == 'release'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment logic here
          # Example: kubectl, terraform, or custom deployment scripts

      - name: Run health checks
        working-directory: apps/backend
        run: npm run test:health
        env:
          TEST_BASE_URL: ${{ secrets.PRODUCTION_URL }}

      - name: Notify production deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Clean up old Docker images
        run: |
          echo "Cleaning up old Docker images..."
          # Add cleanup logic here

      - name: Clean up test artifacts
        run: |
          echo "Cleaning up test artifacts..."
          # Add cleanup logic here
