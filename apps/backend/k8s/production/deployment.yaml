apiVersion: apps/v1
kind: Deployment
metadata:
  name: finnexus-backend
  namespace: finnexus-production
  labels:
    app: finnexus-backend
    version: v1.0.0
    component: backend
    tier: application
    environment: production
  annotations:
    deployment.kubernetes.io/revision: "1"
    finnexusai.com/team: "backend"
    finnexusai.com/contact: "team@finnexusai.com"
    finnexusai.com/description: "FinNexusAI Backend Application"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: finnexus-backend
  template:
    metadata:
      labels:
        app: finnexus-backend
        version: v1.0.0
        component: backend
        tier: application
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
        sidecar.istio.io/inject: "true"
        checksum/config: "placeholder"
        checksum/secret: "placeholder"
    spec:
      serviceAccountName: finnexus-backend
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      initContainers:
      - name: wait-for-dependencies
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          echo "Waiting for dependencies..."
          until nc -z postgres-service 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          until nc -z mongodb-service 27017; do
            echo "Waiting for MongoDB..."
            sleep 2
          done
          until nc -z redis-service 6379; do
            echo "Waiting for Redis..."
            sleep 2
          done
          echo "All dependencies are ready!"
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 50m
            memory: 64Mi
      containers:
      - name: backend
        image: finnexusai/backend:1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: NODE_OPTIONS
          value: "--max-old-space-size=1536 --max-semi-space-size=128"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        envFrom:
        - secretRef:
            name: finnexus-backend-secrets
        - configMapRef:
            name: finnexus-backend-config
        resources:
          limits:
            cpu: "2000m"
            memory: "2Gi"
            ephemeral-storage: "1Gi"
          requests:
            cpu: "1000m"
            memory: "1Gi"
            ephemeral-storage: "500Mi"
        livenessProbe:
          httpGet:
            path: /api/v1/health
            port: 3000
            scheme: HTTP
            httpHeaders:
            - name: X-Health-Check
              value: "liveness"
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /api/v1/health/ready
            port: 3000
            scheme: HTTP
            httpHeaders:
            - name: X-Health-Check
              value: "readiness"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /api/v1/health/startup
            port: 3000
            scheme: HTTP
            httpHeaders:
            - name: X-Health-Check
              value: "startup"
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: uploads
          mountPath: /app/uploads
        - name: tmp
          mountPath: /tmp
        - name: ssl-certs
          mountPath: /app/ssl
          readOnly: true
        - name: config
          mountPath: /app/config
          readOnly: true
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
          seccompProfile:
            type: RuntimeDefault
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 15"]
      volumes:
      - name: logs
        emptyDir:
          sizeLimit: 1Gi
      - name: uploads
        emptyDir:
          sizeLimit: 2Gi
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
      - name: ssl-certs
        secret:
          secretName: finnexus-ssl-certs
      - name: config
        configMap:
          name: finnexus-backend-config
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - finnexus-backend
              topologyKey: kubernetes.io/hostname
          - weight: 50
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - finnexus-backend
              topologyKey: topology.kubernetes.io/zone
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"
      - key: "node-role.kubernetes.io/control-plane"
        operator: "Exists"
        effect: "NoSchedule"
      nodeSelector:
        node-type: "backend"
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      priorityClassName: "high-priority"
