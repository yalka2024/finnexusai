apiVersion: v1
kind: ConfigMap
metadata:
  name: global-load-balancer-config
  namespace: finnexus
  labels:
    app: global-load-balancer
data:
  nginx.conf: |
    upstream backend_us_east_1 {
        server api-us-east-1.finnexusai.com:443 weight=100 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream backend_us_west_2 {
        server api-us-west-2.finnexusai.com:443 weight=80 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream backend_eu_west_1 {
        server api-eu-west-1.finnexusai.com:443 weight=60 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream backend_ap_southeast_1 {
        server api-ap-southeast-1.finnexusai.com:443 weight=40 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    # Geographic routing map
    map $geoip_country_code $backend_pool {
        default backend_us_east_1;
        ~^(US|CA|MX|BR|AR|CL|CO|PE|VE)$ backend_us_east_1;
        ~^(GB|IE|FR|DE|IT|ES|NL|BE|CH|AT|SE|NO|DK|FI|PL|CZ|HU|RO|BG|HR|SI|SK|LT|LV|EE|LU|MT|CY)$ backend_eu_west_1;
        ~^(AU|NZ|SG|MY|TH|ID|PH|VN|IN|JP|KR|CN|HK|TW|MO)$ backend_ap_southeast_1;
        ~^(US)$ backend_us_west_2;
    }
    
    # Health check status
    map $upstream_status $is_healthy {
        ~^[23] 1;
        default 0;
    }
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=heavy:10m rate=10r/m;
    
    server {
        listen 80;
        server_name api.finnexusai.com;
        
        # Redirect HTTP to HTTPS
        return 301 https://$server_name$request_uri;
    }
    
    server {
        listen 443 ssl http2;
        server_name api.finnexusai.com;
        
        # SSL configuration
        ssl_certificate /etc/ssl/certs/finnexusai.com.crt;
        ssl_certificate_key /etc/ssl/private/finnexusai.com.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; frame-ancestors 'none';" always;
        
        # CORS headers
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With, X-Correlation-ID" always;
        
        # Handle preflight requests
        location / {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "*";
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With, X-Correlation-ID";
                add_header Access-Control-Max-Age 86400;
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }
            
            # Rate limiting
            limit_req zone=api burst=20 nodelay;
            
            # Geographic routing
            proxy_pass https://$backend_pool;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Correlation-ID $request_id;
            proxy_set_header X-Region $geoip_country_code;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffering
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # Error handling
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 10s;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            proxy_pass https://$backend_pool/api/v1/health;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Monitoring endpoints
        location /metrics {
            limit_req zone=heavy burst=5 nodelay;
            proxy_pass https://$backend_pool/api/v1/metrics;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Status page
        location /status {
            access_log off;
            return 200 '{"status":"healthy","timestamp":"$time_iso8601","region":"$geoip_country_code","upstream":"$backend_pool"}';
            add_header Content-Type application/json;
        }
        
        # Logging
        access_log /var/log/nginx/access.log combined;
        error_log /var/log/nginx/error.log warn;
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: global-load-balancer
  namespace: finnexus
  labels:
    app: global-load-balancer
spec:
  replicas: 2
  selector:
    matchLabels:
      app: global-load-balancer
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: global-load-balancer
    spec:
      containers:
        - name: nginx
          image: nginx:1.21-alpine
          ports:
            - containerPort: 80
              name: http
            - containerPort: 443
              name: https
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/conf.d
            - name: ssl-certs
              mountPath: /etc/ssl/certs
              readOnly: true
            - name: ssl-private
              mountPath: /etc/ssl/private
              readOnly: true
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 512Mi
          livenessProbe:
            httpGet:
              path: /status
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /status
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 2
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 101
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
      volumes:
        - name: nginx-config
          configMap:
            name: global-load-balancer-config
        - name: ssl-certs
          secret:
            secretName: finnexusai-ssl-certs
        - name: ssl-private
          secret:
            secretName: finnexusai-ssl-private
      nodeSelector:
        kubernetes.io/os: linux

---
apiVersion: v1
kind: Service
metadata:
  name: global-load-balancer
  namespace: finnexus
  labels:
    app: global-load-balancer
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:us-east-1:ACCOUNT_ID:certificate/CERT_ID"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
spec:
  type: LoadBalancer
  selector:
    app: global-load-balancer
  ports:
    - protocol: TCP
      port: 80
      targetPort: http
      name: http
    - protocol: TCP
      port: 443
      targetPort: https
      name: https
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: global-load-balancer-ingress
  namespace: finnexus
  labels:
    app: global-load-balancer
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-burst: "100"
spec:
  ingressClassName: nginx
  rules:
    - host: api.finnexusai.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: global-load-balancer
                port:
                  number: 443
  tls:
    - hosts:
        - api.finnexusai.com
      secretName: finnexusai-tls

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: geoip-config
  namespace: finnexus
  labels:
    app: global-load-balancer
data:
  GeoIP.conf: |
    # GeoIP database configuration
    # Update databases from MaxMind
    DatabaseDirectory /usr/share/GeoIP
    DatabaseMirror GeoLite2
    DatabaseMirror GeoLite2-Country
    DatabaseMirror GeoLite2-City
    
    # Update frequency (daily)
    UpdateInterval 86400
