apiVersion: v1
kind: ConfigMap
metadata:
  name: vulnerability-scanning-config
  namespace: finnexus-production
data:
  snyk-config.yaml: |
    # Snyk Configuration for Vulnerability Scanning
    api_version: "2024-01-01"
    org_id: "${SNYK_ORG_ID}"
    
    # Scan Policies
    scan_policies:
      - name: "high-severity"
        severity_threshold: "high"
        fail_on_issues: true
        auto_fix: false
      
      - name: "medium-severity"
        severity_threshold: "medium"
        fail_on_issues: false
        auto_fix: true
    
    # Scan Targets
    scan_targets:
      - type: "npm"
        path: "apps/backend/package.json"
        policy: "high-severity"
      
      - type: "npm"
        path: "apps/web/package.json"
        policy: "high-severity"
      
      - type: "docker"
        path: "apps/backend/Dockerfile"
        policy: "high-severity"
      
      - type: "docker"
        path: "apps/web/Dockerfile"
        policy: "high-severity"
    
    # Notification Settings
    notifications:
      slack:
        webhook_url: "${SLACK_WEBHOOK_URL}"
        channel: "#security-alerts"
      
      email:
        recipients: ["security@finainexus.com"]
        subject: "Snyk Vulnerability Scan Results"
  
  owasp-config.yaml: |
    # OWASP ZAP Configuration
    zap:
      host: "localhost"
      port: 8080
      
      # Scan Policies
      policies:
        - name: "API Security"
          rules:
            - "10020"  # Insecure JSF ViewState
            - "10021"  # XSS
            - "10023"  # SQL Injection
            - "10024"  # Path Traversal
            - "10025"  # Remote File Include
            - "10026"  # LDAP Injection
            - "10027"  # Script Active Scan Rules
            - "10029"  # Server Side Include
            - "10030"  # OS Command Injection
            - "10031"  # Code Injection
            - "10032"  # Buffer Overflow
            - "10033"  # Format String
            - "10034"  # LDAP Injection
            - "10035"  # NoSQL Injection
            - "10036"  # HTTP Parameter Pollution
            - "10037"  # HTTP Parameter Pollution
            - "10038"  # HTTP Parameter Pollution
            - "10039"  # HTTP Parameter Pollution
            - "10040"  # HTTP Parameter Pollution
            - "10041"  # HTTP Parameter Pollution
            - "10042"  # HTTP Parameter Pollution
            - "10043"  # HTTP Parameter Pollution
            - "10044"  # HTTP Parameter Pollution
            - "10045"  # HTTP Parameter Pollution
            - "10046"  # HTTP Parameter Pollution
            - "10047"  # HTTP Parameter Pollution
            - "10048"  # HTTP Parameter Pollution
            - "10049"  # HTTP Parameter Pollution
            - "10050"  # HTTP Parameter Pollution
            - "10051"  # HTTP Parameter Pollution
            - "10052"  # HTTP Parameter Pollution
            - "10053"  # HTTP Parameter Pollution
            - "10054"  # HTTP Parameter Pollution
            - "10055"  # HTTP Parameter Pollution
            - "10056"  # HTTP Parameter Pollution
            - "10057"  # HTTP Parameter Pollution
            - "10058"  # HTTP Parameter Pollution
            - "10059"  # HTTP Parameter Pollution
            - "10060"  # HTTP Parameter Pollution
            - "10061"  # HTTP Parameter Pollution
            - "10062"  # HTTP Parameter Pollution
            - "10063"  # HTTP Parameter Pollution
            - "10064"  # HTTP Parameter Pollution
            - "10065"  # HTTP Parameter Pollution
            - "10066"  # HTTP Parameter Pollution
            - "10067"  # HTTP Parameter Pollution
            - "10068"  # HTTP Parameter Pollution
            - "10069"  # HTTP Parameter Pollution
            - "10070"  # HTTP Parameter Pollution
            - "10071"  # HTTP Parameter Pollution
            - "10072"  # HTTP Parameter Pollution
            - "10073"  # HTTP Parameter Pollution
            - "10074"  # HTTP Parameter Pollution
            - "10075"  # HTTP Parameter Pollution
            - "10076"  # HTTP Parameter Pollution
            - "10077"  # HTTP Parameter Pollution
            - "10078"  # HTTP Parameter Pollution
            - "10079"  # HTTP Parameter Pollution
            - "10080"  # HTTP Parameter Pollution
            - "10081"  # HTTP Parameter Pollution
            - "10082"  # HTTP Parameter Pollution
            - "10083"  # HTTP Parameter Pollution
            - "10084"  # HTTP Parameter Pollution
            - "10085"  # HTTP Parameter Pollution
            - "10086"  # HTTP Parameter Pollution
            - "10087"  # HTTP Parameter Pollution
            - "10088"  # HTTP Parameter Pollution
            - "10089"  # HTTP Parameter Pollution
            - "10090"  # HTTP Parameter Pollution
            - "10091"  # HTTP Parameter Pollution
            - "10092"  # HTTP Parameter Pollution
            - "10093"  # HTTP Parameter Pollution
            - "10094"  # HTTP Parameter Pollution
            - "10095"  # HTTP Parameter Pollution
            - "10096"  # HTTP Parameter Pollution
            - "10097"  # HTTP Parameter Pollution
            - "10098"  # HTTP Parameter Pollution
            - "10099"  # HTTP Parameter Pollution
            - "10100"  # HTTP Parameter Pollution
      
      # Scan Targets
      targets:
        - url: "http://finnexus-backend-service:3001"
          context: "backend-api"
          policy: "API Security"
        
        - url: "http://finnexus-frontend-service:3000"
          context: "frontend-app"
          policy: "API Security"
      
      # Report Settings
      reports:
        format: "json"
        output_dir: "/reports"
        include_context: true
        include_evidence: true
---
apiVersion: v1
kind: Secret
metadata:
  name: vulnerability-scanning-secrets
  namespace: finnexus-production
type: Opaque
data:
  snyk-token: ${SNYK_TOKEN}
  slack-webhook-url: ${SLACK_WEBHOOK_URL}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: snyk-scan
  namespace: finnexus-production
spec:
  template:
    spec:
      containers:
      - name: snyk
        image: snyk/snyk:docker
        command:
        - /bin/sh
        - -c
        - |
          # Install Snyk CLI
          npm install -g snyk
          
          # Authenticate with Snyk
          snyk auth ${SNYK_TOKEN}
          
          # Scan backend dependencies
          echo "Scanning backend dependencies..."
          snyk test --file=apps/backend/package.json --severity-threshold=high
          
          # Scan frontend dependencies
          echo "Scanning frontend dependencies..."
          snyk test --file=apps/web/package.json --severity-threshold=high
          
          # Scan Docker images
          echo "Scanning Docker images..."
          snyk container test finnexusai-backend:latest --severity-threshold=high
          snyk container test finnexusai-frontend:latest --severity-threshold=high
          
          # Generate reports
          snyk test --file=apps/backend/package.json --json > /reports/backend-snyk-report.json
          snyk test --file=apps/web/package.json --json > /reports/frontend-snyk-report.json
          
          echo "Snyk scan completed successfully!"
        env:
        - name: SNYK_TOKEN
          valueFrom:
            secretKeyRef:
              name: vulnerability-scanning-secrets
              key: snyk-token
        volumeMounts:
        - name: reports
          mountPath: /reports
      volumes:
      - name: reports
        emptyDir: {}
      restartPolicy: Never
  backoffLimit: 3
---
apiVersion: batch/v1
kind: Job
metadata:
  name: owasp-zap-scan
  namespace: finnexus-production
spec:
  template:
    spec:
      containers:
      - name: owasp-zap
        image: owasp/zap2docker-stable:latest
        command:
        - /bin/bash
        - -c
        - |
          # Start ZAP daemon
          zap.sh -daemon -host 0.0.0.0 -port 8080 -config api.disablekey=true &
          
          # Wait for ZAP to start
          sleep 30
          
          # Run spider scan
          echo "Running spider scan on backend..."
          zap-cli spider http://finnexus-backend-service:3001
          
          # Run active scan
          echo "Running active scan on backend..."
          zap-cli active-scan http://finnexus-backend-service:3001
          
          # Run spider scan on frontend
          echo "Running spider scan on frontend..."
          zap-cli spider http://finnexus-frontend-service:3000
          
          # Run active scan on frontend
          echo "Running active scan on frontend..."
          zap-cli active-scan http://finnexus-frontend-service:3000
          
          # Generate reports
          zap-cli report -f json -o /reports/owasp-zap-report.json
          
          echo "OWASP ZAP scan completed successfully!"
        volumeMounts:
        - name: reports
          mountPath: /reports
      volumes:
      - name: reports
        emptyDir: {}
      restartPolicy: Never
  backoffLimit: 3
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vulnerability-scanner
  namespace: finnexus-production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vulnerability-scanner
  template:
    metadata:
      labels:
        app: vulnerability-scanner
    spec:
      containers:
      - name: scanner
        image: alpine:latest
        command:
        - /bin/sh
        - -c
        - |
          # Install dependencies
          apk add --no-cache curl jq
          
          # Wait for services to be ready
          sleep 60
          
          # Run vulnerability scans
          echo "Starting vulnerability scanning..."
          
          # Check if Snyk scan completed successfully
          if kubectl get job snyk-scan -o jsonpath='{.status.conditions[?(@.type=="Complete")].status}' | grep -q "True"; then
            echo "✅ Snyk scan completed successfully"
          else
            echo "❌ Snyk scan failed"
          fi
          
          # Check if OWASP ZAP scan completed successfully
          if kubectl get job owasp-zap-scan -o jsonpath='{.status.conditions[?(@.type=="Complete")].status}' | grep -q "True"; then
            echo "✅ OWASP ZAP scan completed successfully"
          else
            echo "❌ OWASP ZAP scan failed"
          fi
          
          echo "Vulnerability scanning completed!"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: vulnerability-scanner-service
  namespace: finnexus-production
spec:
  ports:
  - port: 8080
    targetPort: 8080
  selector:
    app: vulnerability-scanner



