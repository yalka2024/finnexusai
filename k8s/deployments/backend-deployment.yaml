apiVersion: apps/v1
kind: Deployment
metadata:
  name: finnexus-backend
  namespace: finnexus-production
  labels:
    app: finnexus-backend
    version: v1
    component: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: finnexus-backend
  template:
    metadata:
      labels:
        app: finnexus-backend
        version: v1
        component: backend
    spec:
      containers:
      - name: finnexus-backend
        image: finnexusai-backend:latest
        ports:
        - containerPort: 3001
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3001"
        - name: POSTGRES_HOST
          value: "postgres-service.finnexus-databases.svc.cluster.local"
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: postgres-db
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: postgres-password
        - name: MONGODB_HOST
          value: "mongodb-service.finnexus-databases.svc.cluster.local"
        - name: MONGODB_PORT
          value: "27017"
        - name: MONGODB_DB
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: mongodb-db
        - name: MONGODB_USER
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: mongodb-user
        - name: MONGODB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: mongodb-password
        - name: REDIS_HOST
          value: "redis-service.finnexus-databases.svc.cluster.local"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: redis-password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: jwt-secret
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      restartPolicy: Always
      securityContext:
        fsGroup: 1000
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300



