apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: finnexus-production
data:
  postgresql.conf: |
    # PostgreSQL Configuration for Production
    listen_addresses = '*'
    port = 5432
    max_connections = 200
    shared_buffers = 256MB
    effective_cache_size = 1GB
    maintenance_work_mem = 64MB
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    work_mem = 4MB
    min_wal_size = 1GB
    max_wal_size = 4GB
    
    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'pg_log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_rotation_age = 1d
    log_rotation_size = 100MB
    log_min_duration_statement = 1000
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    log_checkpoints = on
    log_connections = on
    log_disconnections = on
    log_lock_waits = on
    
    # Replication
    wal_level = replica
    max_wal_senders = 10
    max_replication_slots = 10
    hot_standby = on
    
    # Performance
    synchronous_commit = off
    fsync = on
    full_page_writes = on
    
    # Memory
    shared_preload_libraries = 'pg_stat_statements'
    track_activity_query_size = 2048
    pg_stat_statements.track = all
    
    # Security
    ssl = on
    ssl_cert_file = '/etc/ssl/certs/server.crt'
    ssl_key_file = '/etc/ssl/private/server.key'
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: finnexus-production
type: Opaque
data:
  postgres-password: cGFzc3dvcmQxMjM=  # password123
  replication-password: cmVwbGljYXRpb24xMjM=  # replication123
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-primary-pvc
  namespace: finnexus-production
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-primary
  namespace: finnexus-production
  labels:
    app: postgres-primary
spec:
  serviceName: postgres-primary-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres-primary
  template:
    metadata:
      labels:
        app: postgres-primary
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: finnexusai
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-password
        - name: POSTGRES_REPLICATION_USER
          value: replication
        - name: POSTGRES_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: replication-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        command:
        - /bin/bash
        - -c
        - |
          # Initialize PostgreSQL with replication setup
          docker-entrypoint.sh postgres &
          sleep 10
          
          # Create replication user
          psql -U postgres -c "CREATE USER replication REPLICATION LOGIN CONNECTION LIMIT 10 ENCRYPTED PASSWORD 'replication123';"
          
          # Create replication slot
          psql -U postgres -c "SELECT pg_create_physical_replication_slot('replica_slot');"
          
          # Keep container running
          wait
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
            - -h
            - localhost
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
            - -h
            - localhost
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-config
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 100Gi
      storageClassName: fast-ssd
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-primary-service
  namespace: finnexus-production
  labels:
    app: postgres-primary
spec:
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  selector:
    app: postgres-primary
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-replica-1
  namespace: finnexus-production
  labels:
    app: postgres-replica
spec:
  serviceName: postgres-replica-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres-replica
  template:
    metadata:
      labels:
        app: postgres-replica
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: PGUSER
          value: postgres
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        command:
        - /bin/bash
        - -c
        - |
          # Wait for primary to be ready
          sleep 30
          
          # Remove existing data directory
          rm -rf /var/lib/postgresql/data/pgdata/*
          
          # Create base backup from primary
          pg_basebackup -h postgres-primary-service -U replication -D /var/lib/postgresql/data/pgdata -v -P -W -R
          
          # Start PostgreSQL in recovery mode
          docker-entrypoint.sh postgres
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
            - -h
            - localhost
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
            - -h
            - localhost
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-config
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 100Gi
      storageClassName: fast-ssd
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-replica-service
  namespace: finnexus-production
  labels:
    app: postgres-replica
spec:
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  selector:
    app: postgres-replica
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgbouncer
  namespace: finnexus-production
  labels:
    app: pgbouncer
spec:
  replicas: 2
  selector:
    matchLabels:
      app: pgbouncer
  template:
    metadata:
      labels:
        app: pgbouncer
    spec:
      containers:
      - name: pgbouncer
        image: pgbouncer/pgbouncer:latest
        ports:
        - containerPort: 5432
          name: postgres
        - containerPort: 9127
          name: metrics
        env:
        - name: DATABASES_HOST
          value: postgres-primary-service
        - name: DATABASES_PORT
          value: "5432"
        - name: DATABASES_USER
          value: postgres
        - name: DATABASES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-password
        - name: DATABASES_DBNAME
          value: finnexusai
        - name: POOL_MODE
          value: transaction
        - name: MAX_CLIENT_CONN
          value: "1000"
        - name: DEFAULT_POOL_SIZE
          value: "25"
        - name: MIN_POOL_SIZE
          value: "5"
        - name: RESERVE_POOL_SIZE
          value: "5"
        - name: RESERVE_POOL_TIMEOUT
          value: "5"
        - name: MAX_DB_CONNECTIONS
          value: "100"
        - name: MAX_USER_CONNECTIONS
          value: "50"
        - name: SERVER_RESET_QUERY
          value: "DISCARD ALL"
        - name: IGNORE_STARTUP_PARAMETERS
          value: "extra_float_digits"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          tcpSocket:
            port: 5432
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 5432
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: pgbouncer-service
  namespace: finnexus-production
  labels:
    app: pgbouncer
spec:
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  - port: 9127
    targetPort: 9127
    name: metrics
  selector:
    app: pgbouncer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-monitoring
  namespace: finnexus-production
data:
  postgres-exporter.yaml: |
    # PostgreSQL Exporter Configuration
    data_source_name: "postgresql://postgres:password123@postgres-primary-service:5432/finnexusai?sslmode=disable"
    disable_default_metrics: false
    disable_settings_metrics: false
    auto_discover_databases: false
    queries_path: ""
    constant_labels: "service=postgres"
    exclude_databases: ""
    include_databases: ""
    metric_path: /metrics
    web_listen_address: :9187
    web_telemetry_path: /metrics
    log_level: info
    log_format: logger:stderr
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-exporter
  namespace: finnexus-production
  labels:
    app: postgres-exporter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-exporter
  template:
    metadata:
      labels:
        app: postgres-exporter
    spec:
      containers:
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:latest
        ports:
        - containerPort: 9187
          name: metrics
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://postgres:password123@postgres-primary-service:5432/finnexusai?sslmode=disable"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9187
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /metrics
            port: 9187
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-exporter-service
  namespace: finnexus-production
  labels:
    app: postgres-exporter
spec:
  ports:
  - port: 9187
    targetPort: 9187
    name: metrics
  selector:
    app: postgres-exporter



