apiVersion: v1
kind: ConfigMap
metadata:
  name: k6-load-test-script
  namespace: finnexus-production
data:
  load-test.js: |
    import http from 'k6/http';
    import { check, sleep } from 'k6';
    import { Rate } from 'k6/metrics';

    // Custom metrics
    const errorRate = new Rate('error_rate');

    // Test configuration
    export const options = {
      stages: [
        { duration: '2m', target: 100 },   // Ramp up to 100 users
        { duration: '5m', target: 100 },   // Stay at 100 users
        { duration: '2m', target: 500 },   // Ramp up to 500 users
        { duration: '5m', target: 500 },   // Stay at 500 users
        { duration: '2m', target: 1000 },  // Ramp up to 1000 users
        { duration: '5m', target: 1000 },  // Stay at 1000 users
        { duration: '2m', target: 5000 },  // Ramp up to 5000 users
        { duration: '5m', target: 5000 },  // Stay at 5000 users
        { duration: '2m', target: 10000 }, // Ramp up to 10000 users
        { duration: '10m', target: 10000 }, // Stay at 10000 users
        { duration: '2m', target: 0 },     // Ramp down to 0 users
      ],
      thresholds: {
        http_req_duration: ['p(95)<200'], // 95% of requests must complete below 200ms
        http_req_failed: ['rate<0.01'],   // Error rate must be below 1%
        error_rate: ['rate<0.01'],        // Custom error rate below 1%
      },
    };

    // Base URL for the application
    const BASE_URL = __ENV.BASE_URL || 'https://api.finainexus.com';

    export default function () {
      // Test health endpoint
      const healthResponse = http.get(`${BASE_URL}/health`);
      check(healthResponse, {
        'health check status is 200': (r) => r.status === 200,
        'health check response time < 100ms': (r) => r.timings.duration < 100,
      });
      errorRate.add(healthResponse.status !== 200);

      // Test API endpoints
      const apiEndpoints = [
        '/api/license-free-launch/health',
        '/metrics',
        '/api/auth/verify',
      ];

      for (const endpoint of apiEndpoints) {
        const response = http.get(`${BASE_URL}${endpoint}`);
        check(response, {
          [`${endpoint} status is 200 or 401`: (r) => r.status === 200 || r.status === 401,
          [`${endpoint} response time < 200ms`: (r) => r.timings.duration < 200,
        });
        errorRate.add(response.status >= 400);
      }

      // Test concurrent user simulation
      const concurrentUsers = Math.floor(Math.random() * 10) + 1;
      for (let i = 0; i < concurrentUsers; i++) {
        const response = http.get(`${BASE_URL}/health`);
        errorRate.add(response.status !== 200);
      }

      sleep(1);
    }

    export function setup() {
      // Setup function - runs once before the test
      console.log('Starting FinAI Nexus load test...');
      return { startTime: new Date().toISOString() };
    }

    export function teardown(data) {
      // Teardown function - runs once after the test
      console.log(`Load test completed at ${new Date().toISOString()}`);
      console.log(`Test started at: ${data.startTime}`);
    }
---
apiVersion: batch/v1
kind: Job
metadata:
  name: k6-load-test
  namespace: finnexus-production
spec:
  template:
    spec:
      containers:
      - name: k6
        image: grafana/k6:latest
        command:
        - k6
        - run
        - /scripts/load-test.js
        env:
        - name: BASE_URL
          value: "https://api.finainexus.com"
        volumeMounts:
        - name: k6-scripts
          mountPath: /scripts
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
      volumes:
      - name: k6-scripts
        configMap:
          name: k6-load-test-script
      restartPolicy: Never
  backoffLimit: 1
---
apiVersion: v1
kind: Service
metadata:
  name: k6-load-test-service
  namespace: finnexus-production
spec:
  selector:
    app: k6-load-test
  ports:
  - port: 8080
    targetPort: 8080
    name: http



