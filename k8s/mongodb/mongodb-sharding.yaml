apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-config
  namespace: finnexus-production
data:
  mongod.conf: |
    # MongoDB Configuration for Sharded Cluster
    storage:
      dbPath: /data/db
      journal:
        enabled: true
      wiredTiger:
        engineConfig:
          cacheSizeGB: 1
          journalCompressor: snappy
          directoryForIndexes: true
        collectionConfig:
          blockCompressor: snappy
        indexConfig:
          prefixCompression: true

    systemLog:
      destination: file
      logAppend: true
      path: /var/log/mongodb/mongod.log
      logRotate: reopen
      verbosity: 1

    processManagement:
      fork: false
      pidFilePath: /var/run/mongodb/mongod.pid

    net:
      port: 27017
      bindIpAll: true
      maxIncomingConnections: 65536

    operationProfiling:
      slowOpThresholdMs: 100
      mode: slowOp

    replication:
      replSetName: rs0

    sharding:
      clusterRole: shardsvr

    security:
      authorization: enabled
      keyFile: /etc/mongodb/keyfile

  mongos.conf: |
    # MongoDB Router (mongos) Configuration
    systemLog:
      destination: file
      logAppend: true
      path: /var/log/mongodb/mongos.log
      verbosity: 1

    processManagement:
      fork: false

    net:
      port: 27017
      bindIpAll: true

    sharding:
      configDB: configsvr/mongodb-config-0.mongodb-config-service:27017,mongodb-config-1.mongodb-config-service:27017,mongodb-config-2.mongodb-config-service:27017

    security:
      keyFile: /etc/mongodb/keyfile

  mongod-config.conf: |
    # MongoDB Config Server Configuration
    storage:
      dbPath: /data/db
      journal:
        enabled: true
      wiredTiger:
        engineConfig:
          cacheSizeGB: 1

    systemLog:
      destination: file
      logAppend: true
      path: /var/log/mongodb/mongod.log
      verbosity: 1

    processManagement:
      fork: false

    net:
      port: 27017
      bindIpAll: true

    replication:
      replSetName: configReplSet

    sharding:
      clusterRole: configsvr

    security:
      keyFile: /etc/mongodb/keyfile

  init-script.sh: |
    #!/bin/bash
    set -e

    # Wait for MongoDB to be ready
    sleep 30

    # Initialize Config Server Replica Set
    mongosh --host mongodb-config-0.mongodb-config-service:27017 --eval "
      rs.initiate({
        _id: 'configReplSet',
        configsvr: true,
        members: [
          { _id: 0, host: 'mongodb-config-0.mongodb-config-service:27017' },
          { _id: 1, host: 'mongodb-config-1.mongodb-config-service:27017' },
          { _id: 2, host: 'mongodb-config-2.mongodb-config-service:27017' }
        ]
      })
    "

    # Initialize Shard Replica Sets
    mongosh --host mongodb-shard-0.mongodb-shard-service:27017 --eval "
      rs.initiate({
        _id: 'rs0',
        members: [
          { _id: 0, host: 'mongodb-shard-0.mongodb-shard-service:27017' },
          { _id: 1, host: 'mongodb-shard-1.mongodb-shard-service:27017' },
          { _id: 2, host: 'mongodb-shard-2.mongodb-shard-service:27017' }
        ]
      })
    "

    mongosh --host mongodb-shard-3.mongodb-shard-service:27017 --eval "
      rs.initiate({
        _id: 'rs1',
        members: [
          { _id: 0, host: 'mongodb-shard-3.mongodb-shard-service:27017' },
          { _id: 1, host: 'mongodb-shard-4.mongodb-shard-service:27017' },
          { _id: 2, host: 'mongodb-shard-5.mongodb-shard-service:27017' }
        ]
      })
    "

    mongosh --host mongodb-shard-6.mongodb-shard-service:27017 --eval "
      rs.initiate({
        _id: 'rs2',
        members: [
          { _id: 0, host: 'mongodb-shard-6.mongodb-shard-service:27017' },
          { _id: 1, host: 'mongodb-shard-7.mongodb-shard-service:27017' },
          { _id: 2, host: 'mongodb-shard-8.mongodb-shard-service:27017' }
        ]
      })
    "

    # Wait for replica sets to be ready
    sleep 60

    # Add shards to cluster via mongos
    mongosh --host mongodb-router-service:27017 --eval "
      sh.addShard('rs0/mongodb-shard-0.mongodb-shard-service:27017,mongodb-shard-1.mongodb-shard-service:27017,mongodb-shard-2.mongodb-shard-service:27017')
      sh.addShard('rs1/mongodb-shard-3.mongodb-shard-service:27017,mongodb-shard-4.mongodb-shard-service:27017,mongodb-shard-5.mongodb-shard-service:27017')
      sh.addShard('rs2/mongodb-shard-6.mongodb-shard-service:27017,mongodb-shard-7.mongodb-shard-service:27017,mongodb-shard-8.mongodb-shard-service:27017')
    "

    # Enable sharding for databases
    mongosh --host mongodb-router-service:27017 --eval "
      sh.enableSharding('finnexusai')
      sh.shardCollection('finnexusai.users', { _id: 'hashed' })
      sh.shardCollection('finnexusai.portfolios', { userId: 'hashed' })
      sh.shardCollection('finnexusai.transactions', { userId: 'hashed' })
      sh.shardCollection('finnexusai.ai_interactions', { userId: 'hashed' })
    "

    echo "MongoDB sharding setup completed successfully!"
---
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-secret
  namespace: finnexus-production
type: Opaque
data:
  mongodb-keyfile: bW9uZ29kYi1rZXlmaWxlLWNvbnRlbnQtMjAyNA==  # mongodb-keyfile-content-2024
  mongodb-root-password: bW9uZ29kYi1yb290LXBhc3N3b3JkLTIwMjQ=  # mongodb-root-password-2024
  mongodb-user-password: bW9uZ29kYi11c2VyLXBhc3N3b3JkLTIwMjQ=  # mongodb-user-password-2024
---
# Config Server StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb-config
  namespace: finnexus-production
  labels:
    app: mongodb-config
spec:
  serviceName: mongodb-config-service
  replicas: 3
  selector:
    matchLabels:
      app: mongodb-config
  template:
    metadata:
      labels:
        app: mongodb-config
    spec:
      containers:
      - name: mongodb
        image: mongo:7.0
        ports:
        - containerPort: 27017
          name: mongodb
        command:
        - mongod
        - --config
        - /etc/mongod.conf
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: root
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: mongodb-root-password
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        - name: mongodb-config
          mountPath: /etc/mongod.conf
          subPath: mongod-config.conf
        - name: mongodb-keyfile
          mountPath: /etc/mongodb/keyfile
          subPath: mongodb-keyfile
        - name: mongodb-logs
          mountPath: /var/log/mongodb
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: mongodb-config
        configMap:
          name: mongodb-config
      - name: mongodb-keyfile
        secret:
          secretName: mongodb-secret
      - name: mongodb-logs
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: mongodb-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 50Gi
      storageClassName: fast-ssd
---
# Shard StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb-shard
  namespace: finnexus-production
  labels:
    app: mongodb-shard
spec:
  serviceName: mongodb-shard-service
  replicas: 9
  selector:
    matchLabels:
      app: mongodb-shard
  template:
    metadata:
      labels:
        app: mongodb-shard
    spec:
      containers:
      - name: mongodb
        image: mongo:7.0
        ports:
        - containerPort: 27017
          name: mongodb
        command:
        - mongod
        - --config
        - /etc/mongod.conf
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: root
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: mongodb-root-password
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        - name: mongodb-config
          mountPath: /etc/mongod.conf
          subPath: mongod.conf
        - name: mongodb-keyfile
          mountPath: /etc/mongodb/keyfile
          subPath: mongodb-keyfile
        - name: mongodb-logs
          mountPath: /var/log/mongodb
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: mongodb-config
        configMap:
          name: mongodb-config
      - name: mongodb-keyfile
        secret:
          secretName: mongodb-secret
      - name: mongodb-logs
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: mongodb-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 100Gi
      storageClassName: fast-ssd
---
# Router (mongos) StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb-router
  namespace: finnexus-production
  labels:
    app: mongodb-router
spec:
  serviceName: mongodb-router-service
  replicas: 2
  selector:
    matchLabels:
      app: mongodb-router
  template:
    metadata:
      labels:
        app: mongodb-router
    spec:
      containers:
      - name: mongodb
        image: mongo:7.0
        ports:
        - containerPort: 27017
          name: mongodb
        command:
        - mongos
        - --config
        - /etc/mongos.conf
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: root
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: mongodb-root-password
        volumeMounts:
        - name: mongodb-config
          mountPath: /etc/mongos.conf
          subPath: mongos.conf
        - name: mongodb-keyfile
          mountPath: /etc/mongodb/keyfile
          subPath: mongodb-keyfile
        - name: mongodb-logs
          mountPath: /var/log/mongodb
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: mongodb-config
        configMap:
          name: mongodb-config
      - name: mongodb-keyfile
        secret:
          secretName: mongodb-secret
      - name: mongodb-logs
        emptyDir: {}
---
# Services
apiVersion: v1
kind: Service
metadata:
  name: mongodb-config-service
  namespace: finnexus-production
  labels:
    app: mongodb-config
spec:
  clusterIP: None
  ports:
  - port: 27017
    targetPort: 27017
    name: mongodb
  selector:
    app: mongodb-config
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-shard-service
  namespace: finnexus-production
  labels:
    app: mongodb-shard
spec:
  clusterIP: None
  ports:
  - port: 27017
    targetPort: 27017
    name: mongodb
  selector:
    app: mongodb-shard
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-router-service
  namespace: finnexus-production
  labels:
    app: mongodb-router
spec:
  ports:
  - port: 27017
    targetPort: 27017
    name: mongodb
  selector:
    app: mongodb-router
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-external
  namespace: finnexus-production
  labels:
    app: mongodb-router
spec:
  type: LoadBalancer
  ports:
  - port: 27017
    targetPort: 27017
    name: mongodb
  selector:
    app: mongodb-router
---
# Initialization Job
apiVersion: batch/v1
kind: Job
metadata:
  name: mongodb-sharding-init
  namespace: finnexus-production
spec:
  template:
    spec:
      containers:
      - name: mongodb-init
        image: mongo:7.0
        command:
        - /bin/bash
        - /scripts/init-script.sh
        volumeMounts:
        - name: init-script
          mountPath: /scripts
        - name: mongodb-keyfile
          mountPath: /etc/mongodb/keyfile
          subPath: mongodb-keyfile
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: root
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: mongodb-root-password
      volumes:
      - name: init-script
        configMap:
          name: mongodb-config
          defaultMode: 0755
      - name: mongodb-keyfile
        secret:
          secretName: mongodb-secret
      restartPolicy: OnFailure
  backoffLimit: 3
---
# Monitoring
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb-exporter
  namespace: finnexus-production
  labels:
    app: mongodb-exporter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb-exporter
  template:
    metadata:
      labels:
        app: mongodb-exporter
    spec:
      containers:
      - name: mongodb-exporter
        image: percona/mongodb_exporter:latest
        ports:
        - containerPort: 9216
          name: metrics
        env:
        - name: MONGODB_URI
          value: "mongodb://root:mongodb-root-password-2024@mongodb-router-service:27017/admin?authSource=admin"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9216
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /metrics
            port: 9216
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-exporter-service
  namespace: finnexus-production
  labels:
    app: mongodb-exporter
spec:
  ports:
  - port: 9216
    targetPort: 9216
    name: metrics
  selector:
    app: mongodb-exporter



