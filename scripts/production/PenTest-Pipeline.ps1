# PenTest-Pipeline.ps1
# Automated Penetration Testing Pipeline for FinNexusAI
# Comprehensive security testing for web applications and APIs

param(
    [string]$TargetURL = "http://localhost:3000",
    [string]$TargetIP = "127.0.0.1",
    [int[]]$Ports = @(80, 443, 3000, 8080, 9090),
    [string]$ReportsPath = ".\reports\pentest",
    [string]$NishangPath = ".\tools\nishang"
)

Write-Host "üîç Starting FinNexusAI Penetration Testing Pipeline..." -ForegroundColor Cyan

# Create reports directory
if (-not (Test-Path $ReportsPath)) {
    New-Item -ItemType Directory -Path $ReportsPath -Force
    Write-Host "‚úÖ Created penetration testing reports directory: $ReportsPath" -ForegroundColor Green
}

$currentDate = Get-Date -Format 'yyyyMMdd-HHmmss'
$reportFile = Join-Path $ReportsPath "pentest-report-$currentDate.json"
$vulnerabilityLog = Join-Path $ReportsPath "vulnerabilities-$currentDate.csv"

# Initialize penetration testing results
$penTestResults = @{
    StartTime = Get-Date
    TargetURL = $TargetURL
    TargetIP = $TargetIP
    Vulnerabilities = @()
    PortScanResults = @()
    WebVulnerabilities = @()
    APIVulnerabilities = @()
    SecurityScore = 100
    Recommendations = @()
}

# Download Nishang if not exists
if (-not (Test-Path $NishangPath)) {
    Write-Host "üì¶ Downloading Nishang penetration testing toolkit..." -ForegroundColor Yellow
    try {
        git clone https://github.com/samratashok/nishang.git $NishangPath
        Write-Host "‚úÖ Nishang toolkit downloaded successfully" -ForegroundColor Green
    } catch {
        Write-Host "‚ö†Ô∏è Failed to download Nishang. Using alternative methods..." -ForegroundColor Yellow
    }
}

# Port Scanning
Write-Host "üîç Performing port scan on target $TargetIP..." -ForegroundColor Yellow
$openPorts = @()

foreach ($port in $Ports) {
    try {
        $tcpClient = New-Object System.Net.Sockets.TcpClient
        $connect = $tcpClient.BeginConnect($TargetIP, $port, $null, $null)
        $wait = $connect.AsyncWaitHandle.WaitOne(3000, $false)
        
        if ($wait) {
            $tcpClient.EndConnect($connect)
            $openPorts += $port
            Write-Host "‚úÖ Port $port is OPEN" -ForegroundColor Green
            
            $portResult = [PSCustomObject]@{
                Port = $port
                Status = "Open"
                Service = $this.GetServiceName($port)
                Timestamp = Get-Date
            }
            $penTestResults.PortScanResults += $portResult
        } else {
            Write-Host "‚ùå Port $port is CLOSED" -ForegroundColor Red
        }
        $tcpClient.Close()
    } catch {
        Write-Host "‚ùå Port $port is FILTERED or CLOSED" -ForegroundColor Red
    }
}

# Web Application Security Testing
Write-Host "üåê Performing web application security tests..." -ForegroundColor Yellow

# Test for common web vulnerabilities
$webTests = @(
    @{ Name = "SQL Injection"; URL = "$TargetURL/api/v1/users?id=1' OR '1'='1"; Expected = "error|exception|sql" },
    @{ Name = "XSS Test"; URL = "$TargetURL/api/v1/search?q=<script>alert('xss')</script>"; Expected = "<script>" },
    @{ Name = "Directory Traversal"; URL = "$TargetURL/api/v1/files?path=../../../etc/passwd"; Expected = "root:" },
    @{ Name = "CSRF Token Missing"; URL = "$TargetURL/api/v1/trade"; Method = "POST"; Expected = "csrf|token" },
    @{ Name = "Information Disclosure"; URL = "$TargetURL/.env"; Expected = "password|secret|key" },
    @{ Name = "Server Information"; URL = "$TargetURL/server-status"; Expected = "apache|nginx|server" }
)

foreach ($test in $webTests) {
    try {
        Write-Host "   Testing: $($test.Name)" -ForegroundColor Cyan
        
        $response = if ($test.Method -eq "POST") {
            Invoke-WebRequest -Uri $test.URL -Method POST -Body "{}" -ContentType "application/json" -TimeoutSec 10 -ErrorAction SilentlyContinue
        } else {
            Invoke-WebRequest -Uri $test.URL -TimeoutSec 10 -ErrorAction SilentlyContinue
        }
        
        if ($response -and $response.Content -match $test.Expected) {
            $vulnerability = [PSCustomObject]@{
                Type = $test.Name
                Severity = "High"
                URL = $test.URL
                Description = "Potential vulnerability detected"
                Evidence = $response.Content.Substring(0, [Math]::Min(200, $response.Content.Length))
                Timestamp = Get-Date
            }
            
            $penTestResults.Vulnerabilities += $vulnerability
            $penTestResults.WebVulnerabilities += $vulnerability
            $penTestResults.SecurityScore -= 15
            
            Write-Host "   üö® VULNERABILITY FOUND: $($test.Name)" -ForegroundColor Red
            
            # Log to CSV
            $vulnerability | Export-Csv -Path $vulnerabilityLog -Append -NoTypeInformation
        } else {
            Write-Host "   ‚úÖ $($test.Name) - No vulnerability detected" -ForegroundColor Green
        }
    } catch {
        Write-Host "   ‚ö†Ô∏è $($test.Name) - Test failed or endpoint not accessible" -ForegroundColor Yellow
    }
}

# API Security Testing
Write-Host "üîå Performing API security tests..." -ForegroundColor Yellow

$apiTests = @(
    @{ Name = "Authentication Bypass"; URL = "$TargetURL/api/v1/portfolio"; Headers = @{} },
    @{ Name = "Rate Limiting"; URL = "$TargetURL/api/v1/trade/buy"; Count = 100 },
    @{ Name = "Input Validation"; URL = "$TargetURL/api/v1/trade/buy"; Body = '{"symbol":"BTC","amount":-1000}' },
    @{ Name = "Authorization Test"; URL = "$TargetURL/api/v1/admin/users"; Method = "GET" }
)

foreach ($test in $apiTests) {
    try {
        Write-Host "   Testing API: $($test.Name)" -ForegroundColor Cyan
        
        if ($test.Name -eq "Rate Limiting") {
            # Test rate limiting by making multiple requests
            $rateLimitExceeded = $false
            for ($i = 1; $i -le $test.Count; $i++) {
                $response = Invoke-WebRequest -Uri $test.URL -TimeoutSec 5 -ErrorAction SilentlyContinue
                if ($response.StatusCode -eq 429) {
                    $rateLimitExceeded = $true
                    break
                }
            }
            
            if (-not $rateLimitExceeded) {
                $vulnerability = [PSCustomObject]@{
                    Type = "Rate Limiting Bypass"
                    Severity = "Medium"
                    URL = $test.URL
                    Description = "Rate limiting not properly implemented"
                    Evidence = "Made $($test.Count) requests without rate limiting"
                    Timestamp = Get-Date
                }
                
                $penTestResults.Vulnerabilities += $vulnerability
                $penTestResults.APIVulnerabilities += $vulnerability
                $penTestResults.SecurityScore -= 10
                
                Write-Host "   üö® VULNERABILITY: Rate limiting bypass possible" -ForegroundColor Red
            } else {
                Write-Host "   ‚úÖ Rate limiting working correctly" -ForegroundColor Green
            }
        } else {
            $headers = @{}
            if ($test.Headers) { $headers = $test.Headers }
            
            $response = if ($test.Method -eq "POST") {
                Invoke-WebRequest -Uri $test.URL -Method POST -Body $test.Body -ContentType "application/json" -Headers $headers -TimeoutSec 10 -ErrorAction SilentlyContinue
            } else {
                Invoke-WebRequest -Uri $test.URL -Headers $headers -TimeoutSec 10 -ErrorAction SilentlyContinue
            }
            
            if ($response -and $response.StatusCode -eq 200) {
                $vulnerability = [PSCustomObject]@{
                    Type = $test.Name
                    Severity = "High"
                    URL = $test.URL
                    Description = "API endpoint accessible without proper authentication/authorization"
                    Evidence = "Status Code: $($response.StatusCode)"
                    Timestamp = Get-Date
                }
                
                $penTestResults.Vulnerabilities += $vulnerability
                $penTestResults.APIVulnerabilities += $vulnerability
                $penTestResults.SecurityScore -= 20
                
                Write-Host "   üö® VULNERABILITY: $($test.Name)" -ForegroundColor Red
                
                # Log to CSV
                $vulnerability | Export-Csv -Path $vulnerabilityLog -Append -NoTypeInformation
            } else {
                Write-Host "   ‚úÖ $($test.Name) - Properly secured" -ForegroundColor Green
            }
        }
    } catch {
        Write-Host "   ‚úÖ $($test.Name) - Endpoint properly protected (error returned)" -ForegroundColor Green
    }
}

# SSL/TLS Security Testing
Write-Host "üîê Testing SSL/TLS security..." -ForegroundColor Yellow

if ($TargetURL -like "https://*") {
    try {
        $uri = [System.Uri]$TargetURL
        $tcpClient = New-Object System.Net.Sockets.TcpClient
        $tcpClient.Connect($uri.Host, 443)
        $sslStream = New-Object System.Net.Security.SslStream($tcpClient.GetStream())
        $sslStream.AuthenticateAsClient($uri.Host)
        
        $cert = $sslStream.RemoteCertificate
        $cert2 = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2($cert)
        
        $sslInfo = [PSCustomObject]@{
            Subject = $cert2.Subject
            Issuer = $cert2.Issuer
            ValidFrom = $cert2.NotBefore
            ValidTo = $cert2.NotAfter
            SignatureAlgorithm = $cert2.SignatureAlgorithm.FriendlyName
            KeySize = $cert2.PublicKey.Key.KeySize
        }
        
        Write-Host "   ‚úÖ SSL Certificate Information:" -ForegroundColor Green
        Write-Host "      Subject: $($sslInfo.Subject)" -ForegroundColor White
        Write-Host "      Valid To: $($sslInfo.ValidTo)" -ForegroundColor White
        Write-Host "      Key Size: $($sslInfo.KeySize) bits" -ForegroundColor White
        
        # Check for weak SSL configurations
        if ($sslInfo.KeySize -lt 2048) {
            $vulnerability = [PSCustomObject]@{
                Type = "Weak SSL Key Size"
                Severity = "Medium"
                URL = $TargetURL
                Description = "SSL certificate uses weak key size: $($sslInfo.KeySize) bits"
                Evidence = "Key Size: $($sslInfo.KeySize)"
                Timestamp = Get-Date
            }
            
            $penTestResults.Vulnerabilities += $vulnerability
            $penTestResults.SecurityScore -= 10
            
            Write-Host "   üö® VULNERABILITY: Weak SSL key size" -ForegroundColor Red
        }
        
        $tcpClient.Close()
    } catch {
        Write-Host "   ‚ö†Ô∏è SSL testing failed: $($_.Exception.Message)" -ForegroundColor Yellow
    }
}

# Generate security recommendations
$penTestResults.Recommendations = @(
    "Implement proper input validation and sanitization",
    "Enable rate limiting on all API endpoints",
    "Use strong SSL/TLS configurations (TLS 1.2+)",
    "Implement proper authentication and authorization",
    "Regular security testing and code reviews",
    "Implement Web Application Firewall (WAF)",
    "Enable security headers (HSTS, CSP, X-Frame-Options)",
    "Regular vulnerability scanning and patching"
)

# Finalize results
$penTestResults.EndTime = Get-Date
$penTestResults.Duration = ($penTestResults.EndTime - $penTestResults.StartTime).TotalMinutes
$penTestResults.TotalVulnerabilities = $penTestResults.Vulnerabilities.Count

# Ensure security score doesn't go below 0
if ($penTestResults.SecurityScore -lt 0) { $penTestResults.SecurityScore = 0 }

# Export comprehensive report
$penTestResults | ConvertTo-Json -Depth 4 | Out-File -FilePath $reportFile -Encoding UTF8

Write-Host "‚úÖ Penetration testing completed!" -ForegroundColor Green
Write-Host "üìä Penetration Test Results:" -ForegroundColor Cyan
Write-Host "   Target: $TargetURL" -ForegroundColor White
Write-Host "   Duration: $([Math]::Round($penTestResults.Duration, 2)) minutes" -ForegroundColor White
Write-Host "   Open Ports: $($openPorts -join ', ')" -ForegroundColor White
Write-Host "   Total Vulnerabilities: $($penTestResults.TotalVulnerabilities)" -ForegroundColor White
Write-Host "   Security Score: $($penTestResults.SecurityScore)/100" -ForegroundColor White
Write-Host "   Report: $reportFile" -ForegroundColor White
Write-Host "   Vulnerabilities: $vulnerabilityLog" -ForegroundColor White

# Security score interpretation
if ($penTestResults.SecurityScore -ge 90) {
    Write-Host "üü¢ Security Status: EXCELLENT" -ForegroundColor Green
} elseif ($penTestResults.SecurityScore -ge 70) {
    Write-Host "üü° Security Status: GOOD" -ForegroundColor Yellow
} elseif ($penTestResults.SecurityScore -ge 50) {
    Write-Host "üü† Security Status: FAIR" -ForegroundColor DarkYellow
} else {
    Write-Host "üî¥ Security Status: POOR - Immediate attention required" -ForegroundColor Red
}

Write-Host "üí° Review the detailed report and implement recommended security measures" -ForegroundColor Yellow
